import React from 'react'
import PropTypes from 'prop-types'
import './styles.css'
import classNames from 'classnames'

const Row = ({
  children,
  reverse,
  xsStart,
  smStart,
  mdStart,
  lgStart,
  xsCenter,
  smCenter,
  mdCenter,
  lgCenter,
  xsEnd,
  smEnd,
  mdEnd,
  lgEnd,
  xsTop,
  smTop,
  mdTop,
  lgTop,
  xsBottom,
  smBottom,
  mdBottom,
  lgBottom,
  xsMiddle,
  smMiddle,
  mdMiddle,
  lgMiddle,
  xsAround,
  smAround,
  mdAround,
  lgAround,
  xsBetween,
  smBetween,
  mdBetween,
  lgBetween,
  xsFirst,
  smFirst,
  mdFirst,
  lgFirst,
  xsLast,
  smLast,
  mdLast,
  lgLast,
  marginTop,
  marginBottom,
  paddingBottom,
  paddingTop
}) => {

  const styles = {
    marginTop: marginTop,
    marginBottom: marginBottom,
    paddingBottom: paddingBottom,
    paddingTop: paddingTop
  }
  return (
    <div
      style={styles}
      className={
      classNames('row', {
          'reverse': reverse,
          'start-xs': xsStart,
          'start-sm': smStart,
          'start-md': mdStart,
          'start-lg': lgStart,
          'center-xs': xsCenter,
          'center-sm': smCenter,
          'center-md': mdCenter,
          'center-lg': lgCenter,
          'end-xs': xsEnd,
          'end-sm': smEnd,
          'end-md': mdEnd,
          'end-lg': lgEnd,
          'top-xs': xsTop,
          'top-sm': smTop,
          'top-md': mdTop,
          'top-lg': lgTop,
          'middle-xs': xsMiddle,
          'middle-sm': smMiddle,
          'middle-md': mdMiddle,
          'middle-lg': lgMiddle,
          'bottom-xs': xsBottom,
          'bottom-sm': smBottom,
          'bottom-md': mdBottom,
          'bottom-lg': lgBottom,
          'around-xs': xsAround,
          'around-sm': smAround,
          'around-md': mdAround,
          'around-lg': lgAround,
          'between-xs': xsBetween,
          'between-sm': smBetween,
          'between-md': mdBetween,
          'between-lg': lgBetween,
          'first-xs': xsFirst,
          'first-sm': smFirst,
          'first-md': mdFirst,
          'first-lg': lgFirst,
          'last-xs': xsLast,
          'last-sm': smLast,
          'last-md': mdLast,
          'last-lg': lgLast
        })}>
      {children}
    </div>
  )
}

Row.propTypes = {
  children: PropTypes.node.isRequired,
  reverse: PropTypes.bool,
  xsStart: PropTypes.bool,
  smStart: PropTypes.bool,
  mdStart: PropTypes.bool,
  lgStart: PropTypes.bool,
  xsCenter: PropTypes.bool,
  smCenter: PropTypes.bool,
  mdCenter: PropTypes.bool,
  lgCenter: PropTypes.bool,
  xsEnd: PropTypes.bool,
  smEnd: PropTypes.bool,
  mdEnd: PropTypes.bool,
  lgEnd: PropTypes.bool,
  xsTop: PropTypes.bool,
  smTop: PropTypes.bool,
  mdTop: PropTypes.bool,
  lgTop: PropTypes.bool,
  xsBottom: PropTypes.bool,
  smBottom: PropTypes.bool,
  mdBottom: PropTypes.bool,
  lgBottom: PropTypes.bool,
  xsMiddle: PropTypes.bool,
  smMiddle: PropTypes.bool,
  mdMiddle: PropTypes.bool,
  lgMiddle: PropTypes.bool,
  xsAround: PropTypes.bool,
  smAround: PropTypes.bool,
  mdAround: PropTypes.bool,
  lgAround: PropTypes.bool,
  xsBetween: PropTypes.bool,
  smBetween: PropTypes.bool,
  mdBetween: PropTypes.bool,
  lgBetween: PropTypes.bool,
  xsFirst: PropTypes.bool,
  smFirst: PropTypes.bool,
  mdFirst: PropTypes.bool,
  lgFirst: PropTypes.bool,
  xsLast: PropTypes.bool,
  smLast: PropTypes.bool,
  mdLast: PropTypes.bool,
  lgLast: PropTypes.bool
}

export {Row}
